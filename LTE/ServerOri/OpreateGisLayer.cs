/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LTE
{
  public partial class OpreateGisLayer {
    public interface ISync {
      Result RefreshCell();
      Result refreshGroundCover(string cellName);
      Result refresh3DCover(string cellName);
      Result refreshGroundCoverLayer(int minXid, int minYid, int maxXid, int maxYid);
      Result refresh3DCoverLayer(int minXid, int minYid, int maxXid, int maxYid);
      Result refreshDTLayer(string bts, int dis, double minx, double miny, double maxx, double maxy);
      Result refreshDefectLayer(int minXid, int minYid, int maxXid, int maxYid, DefectType type);
      Result refreshInfLayer();
      Result refreshTINLayer();
      Result refreshBuildingLayer();
      Result refreshBuildingSmoothLayer();
      Result makeFishnet();
      Result overlaybuilding();
      Result overlaygrass();
      Result overlaywater();
      Result cluster();
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_RefreshCell(AsyncCallback callback, object state);
      Result End_RefreshCell(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refreshGroundCover(AsyncCallback callback, object state, string cellName);
      Result End_refreshGroundCover(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refresh3DCover(AsyncCallback callback, object state, string cellName);
      Result End_refresh3DCover(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refreshGroundCoverLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid);
      Result End_refreshGroundCoverLayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refresh3DCoverLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid);
      Result End_refresh3DCoverLayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refreshDTLayer(AsyncCallback callback, object state, string bts, int dis, double minx, double miny, double maxx, double maxy);
      Result End_refreshDTLayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refreshDefectLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid, DefectType type);
      Result End_refreshDefectLayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refreshInfLayer(AsyncCallback callback, object state);
      Result End_refreshInfLayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refreshTINLayer(AsyncCallback callback, object state);
      Result End_refreshTINLayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refreshBuildingLayer(AsyncCallback callback, object state);
      Result End_refreshBuildingLayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_refreshBuildingSmoothLayer(AsyncCallback callback, object state);
      Result End_refreshBuildingSmoothLayer(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_makeFishnet(AsyncCallback callback, object state);
      Result End_makeFishnet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_overlaybuilding(AsyncCallback callback, object state);
      Result End_overlaybuilding(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_overlaygrass(AsyncCallback callback, object state);
      Result End_overlaygrass(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_overlaywater(AsyncCallback callback, object state);
      Result End_overlaywater(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_cluster(AsyncCallback callback, object state);
      Result End_cluster(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_RefreshCell(AsyncCallback callback, object state)
      {
        return send_RefreshCell(callback, state);
      }

      public Result End_RefreshCell(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RefreshCell();
      }

      #endif

      public Result RefreshCell()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_RefreshCell(null, null);
        return End_RefreshCell(asyncResult);

        #else
        send_RefreshCell();
        return recv_RefreshCell();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RefreshCell(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("RefreshCell", TMessageType.Call, seqid_));
        RefreshCell_args args = new RefreshCell_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_RefreshCell()
      {
        oprot_.WriteMessageBegin(new TMessage("RefreshCell", TMessageType.Call, seqid_));
        RefreshCell_args args = new RefreshCell_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_RefreshCell()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RefreshCell_result result = new RefreshCell_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RefreshCell failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refreshGroundCover(AsyncCallback callback, object state, string cellName)
      {
        return send_refreshGroundCover(callback, state, cellName);
      }

      public Result End_refreshGroundCover(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refreshGroundCover();
      }

      #endif

      public Result refreshGroundCover(string cellName)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refreshGroundCover(null, null, cellName);
        return End_refreshGroundCover(asyncResult);

        #else
        send_refreshGroundCover(cellName);
        return recv_refreshGroundCover();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refreshGroundCover(AsyncCallback callback, object state, string cellName)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshGroundCover", TMessageType.Call, seqid_));
        refreshGroundCover_args args = new refreshGroundCover_args();
        args.CellName = cellName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refreshGroundCover(string cellName)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshGroundCover", TMessageType.Call, seqid_));
        refreshGroundCover_args args = new refreshGroundCover_args();
        args.CellName = cellName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refreshGroundCover()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refreshGroundCover_result result = new refreshGroundCover_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshGroundCover failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refresh3DCover(AsyncCallback callback, object state, string cellName)
      {
        return send_refresh3DCover(callback, state, cellName);
      }

      public Result End_refresh3DCover(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refresh3DCover();
      }

      #endif

      public Result refresh3DCover(string cellName)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refresh3DCover(null, null, cellName);
        return End_refresh3DCover(asyncResult);

        #else
        send_refresh3DCover(cellName);
        return recv_refresh3DCover();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refresh3DCover(AsyncCallback callback, object state, string cellName)
      {
        oprot_.WriteMessageBegin(new TMessage("refresh3DCover", TMessageType.Call, seqid_));
        refresh3DCover_args args = new refresh3DCover_args();
        args.CellName = cellName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refresh3DCover(string cellName)
      {
        oprot_.WriteMessageBegin(new TMessage("refresh3DCover", TMessageType.Call, seqid_));
        refresh3DCover_args args = new refresh3DCover_args();
        args.CellName = cellName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refresh3DCover()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refresh3DCover_result result = new refresh3DCover_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refresh3DCover failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refreshGroundCoverLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid)
      {
        return send_refreshGroundCoverLayer(callback, state, minXid, minYid, maxXid, maxYid);
      }

      public Result End_refreshGroundCoverLayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refreshGroundCoverLayer();
      }

      #endif

      public Result refreshGroundCoverLayer(int minXid, int minYid, int maxXid, int maxYid)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refreshGroundCoverLayer(null, null, minXid, minYid, maxXid, maxYid);
        return End_refreshGroundCoverLayer(asyncResult);

        #else
        send_refreshGroundCoverLayer(minXid, minYid, maxXid, maxYid);
        return recv_refreshGroundCoverLayer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refreshGroundCoverLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshGroundCoverLayer", TMessageType.Call, seqid_));
        refreshGroundCoverLayer_args args = new refreshGroundCoverLayer_args();
        args.MinXid = minXid;
        args.MinYid = minYid;
        args.MaxXid = maxXid;
        args.MaxYid = maxYid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refreshGroundCoverLayer(int minXid, int minYid, int maxXid, int maxYid)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshGroundCoverLayer", TMessageType.Call, seqid_));
        refreshGroundCoverLayer_args args = new refreshGroundCoverLayer_args();
        args.MinXid = minXid;
        args.MinYid = minYid;
        args.MaxXid = maxXid;
        args.MaxYid = maxYid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refreshGroundCoverLayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refreshGroundCoverLayer_result result = new refreshGroundCoverLayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshGroundCoverLayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refresh3DCoverLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid)
      {
        return send_refresh3DCoverLayer(callback, state, minXid, minYid, maxXid, maxYid);
      }

      public Result End_refresh3DCoverLayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refresh3DCoverLayer();
      }

      #endif

      public Result refresh3DCoverLayer(int minXid, int minYid, int maxXid, int maxYid)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refresh3DCoverLayer(null, null, minXid, minYid, maxXid, maxYid);
        return End_refresh3DCoverLayer(asyncResult);

        #else
        send_refresh3DCoverLayer(minXid, minYid, maxXid, maxYid);
        return recv_refresh3DCoverLayer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refresh3DCoverLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid)
      {
        oprot_.WriteMessageBegin(new TMessage("refresh3DCoverLayer", TMessageType.Call, seqid_));
        refresh3DCoverLayer_args args = new refresh3DCoverLayer_args();
        args.MinXid = minXid;
        args.MinYid = minYid;
        args.MaxXid = maxXid;
        args.MaxYid = maxYid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refresh3DCoverLayer(int minXid, int minYid, int maxXid, int maxYid)
      {
        oprot_.WriteMessageBegin(new TMessage("refresh3DCoverLayer", TMessageType.Call, seqid_));
        refresh3DCoverLayer_args args = new refresh3DCoverLayer_args();
        args.MinXid = minXid;
        args.MinYid = minYid;
        args.MaxXid = maxXid;
        args.MaxYid = maxYid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refresh3DCoverLayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refresh3DCoverLayer_result result = new refresh3DCoverLayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refresh3DCoverLayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refreshDTLayer(AsyncCallback callback, object state, string bts, int dis, double minx, double miny, double maxx, double maxy)
      {
        return send_refreshDTLayer(callback, state, bts, dis, minx, miny, maxx, maxy);
      }

      public Result End_refreshDTLayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refreshDTLayer();
      }

      #endif

      public Result refreshDTLayer(string bts, int dis, double minx, double miny, double maxx, double maxy)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refreshDTLayer(null, null, bts, dis, minx, miny, maxx, maxy);
        return End_refreshDTLayer(asyncResult);

        #else
        send_refreshDTLayer(bts, dis, minx, miny, maxx, maxy);
        return recv_refreshDTLayer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refreshDTLayer(AsyncCallback callback, object state, string bts, int dis, double minx, double miny, double maxx, double maxy)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshDTLayer", TMessageType.Call, seqid_));
        refreshDTLayer_args args = new refreshDTLayer_args();
        args.Bts = bts;
        args.Dis = dis;
        args.Minx = minx;
        args.Miny = miny;
        args.Maxx = maxx;
        args.Maxy = maxy;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refreshDTLayer(string bts, int dis, double minx, double miny, double maxx, double maxy)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshDTLayer", TMessageType.Call, seqid_));
        refreshDTLayer_args args = new refreshDTLayer_args();
        args.Bts = bts;
        args.Dis = dis;
        args.Minx = minx;
        args.Miny = miny;
        args.Maxx = maxx;
        args.Maxy = maxy;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refreshDTLayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refreshDTLayer_result result = new refreshDTLayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshDTLayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refreshDefectLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid, DefectType type)
      {
        return send_refreshDefectLayer(callback, state, minXid, minYid, maxXid, maxYid, type);
      }

      public Result End_refreshDefectLayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refreshDefectLayer();
      }

      #endif

      public Result refreshDefectLayer(int minXid, int minYid, int maxXid, int maxYid, DefectType type)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refreshDefectLayer(null, null, minXid, minYid, maxXid, maxYid, type);
        return End_refreshDefectLayer(asyncResult);

        #else
        send_refreshDefectLayer(minXid, minYid, maxXid, maxYid, type);
        return recv_refreshDefectLayer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refreshDefectLayer(AsyncCallback callback, object state, int minXid, int minYid, int maxXid, int maxYid, DefectType type)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshDefectLayer", TMessageType.Call, seqid_));
        refreshDefectLayer_args args = new refreshDefectLayer_args();
        args.MinXid = minXid;
        args.MinYid = minYid;
        args.MaxXid = maxXid;
        args.MaxYid = maxYid;
        args.Type = type;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refreshDefectLayer(int minXid, int minYid, int maxXid, int maxYid, DefectType type)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshDefectLayer", TMessageType.Call, seqid_));
        refreshDefectLayer_args args = new refreshDefectLayer_args();
        args.MinXid = minXid;
        args.MinYid = minYid;
        args.MaxXid = maxXid;
        args.MaxYid = maxYid;
        args.Type = type;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refreshDefectLayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refreshDefectLayer_result result = new refreshDefectLayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshDefectLayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refreshInfLayer(AsyncCallback callback, object state)
      {
        return send_refreshInfLayer(callback, state);
      }

      public Result End_refreshInfLayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refreshInfLayer();
      }

      #endif

      public Result refreshInfLayer()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refreshInfLayer(null, null);
        return End_refreshInfLayer(asyncResult);

        #else
        send_refreshInfLayer();
        return recv_refreshInfLayer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refreshInfLayer(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshInfLayer", TMessageType.Call, seqid_));
        refreshInfLayer_args args = new refreshInfLayer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refreshInfLayer()
      {
        oprot_.WriteMessageBegin(new TMessage("refreshInfLayer", TMessageType.Call, seqid_));
        refreshInfLayer_args args = new refreshInfLayer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refreshInfLayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refreshInfLayer_result result = new refreshInfLayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshInfLayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refreshTINLayer(AsyncCallback callback, object state)
      {
        return send_refreshTINLayer(callback, state);
      }

      public Result End_refreshTINLayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refreshTINLayer();
      }

      #endif

      public Result refreshTINLayer()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refreshTINLayer(null, null);
        return End_refreshTINLayer(asyncResult);

        #else
        send_refreshTINLayer();
        return recv_refreshTINLayer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refreshTINLayer(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshTINLayer", TMessageType.Call, seqid_));
        refreshTINLayer_args args = new refreshTINLayer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refreshTINLayer()
      {
        oprot_.WriteMessageBegin(new TMessage("refreshTINLayer", TMessageType.Call, seqid_));
        refreshTINLayer_args args = new refreshTINLayer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refreshTINLayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refreshTINLayer_result result = new refreshTINLayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshTINLayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refreshBuildingLayer(AsyncCallback callback, object state)
      {
        return send_refreshBuildingLayer(callback, state);
      }

      public Result End_refreshBuildingLayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refreshBuildingLayer();
      }

      #endif

      public Result refreshBuildingLayer()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refreshBuildingLayer(null, null);
        return End_refreshBuildingLayer(asyncResult);

        #else
        send_refreshBuildingLayer();
        return recv_refreshBuildingLayer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refreshBuildingLayer(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshBuildingLayer", TMessageType.Call, seqid_));
        refreshBuildingLayer_args args = new refreshBuildingLayer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refreshBuildingLayer()
      {
        oprot_.WriteMessageBegin(new TMessage("refreshBuildingLayer", TMessageType.Call, seqid_));
        refreshBuildingLayer_args args = new refreshBuildingLayer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refreshBuildingLayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refreshBuildingLayer_result result = new refreshBuildingLayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshBuildingLayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_refreshBuildingSmoothLayer(AsyncCallback callback, object state)
      {
        return send_refreshBuildingSmoothLayer(callback, state);
      }

      public Result End_refreshBuildingSmoothLayer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_refreshBuildingSmoothLayer();
      }

      #endif

      public Result refreshBuildingSmoothLayer()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_refreshBuildingSmoothLayer(null, null);
        return End_refreshBuildingSmoothLayer(asyncResult);

        #else
        send_refreshBuildingSmoothLayer();
        return recv_refreshBuildingSmoothLayer();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_refreshBuildingSmoothLayer(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("refreshBuildingSmoothLayer", TMessageType.Call, seqid_));
        refreshBuildingSmoothLayer_args args = new refreshBuildingSmoothLayer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_refreshBuildingSmoothLayer()
      {
        oprot_.WriteMessageBegin(new TMessage("refreshBuildingSmoothLayer", TMessageType.Call, seqid_));
        refreshBuildingSmoothLayer_args args = new refreshBuildingSmoothLayer_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_refreshBuildingSmoothLayer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        refreshBuildingSmoothLayer_result result = new refreshBuildingSmoothLayer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshBuildingSmoothLayer failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_makeFishnet(AsyncCallback callback, object state)
      {
        return send_makeFishnet(callback, state);
      }

      public Result End_makeFishnet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_makeFishnet();
      }

      #endif

      public Result makeFishnet()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_makeFishnet(null, null);
        return End_makeFishnet(asyncResult);

        #else
        send_makeFishnet();
        return recv_makeFishnet();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_makeFishnet(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("makeFishnet", TMessageType.Call, seqid_));
        makeFishnet_args args = new makeFishnet_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_makeFishnet()
      {
        oprot_.WriteMessageBegin(new TMessage("makeFishnet", TMessageType.Call, seqid_));
        makeFishnet_args args = new makeFishnet_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_makeFishnet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        makeFishnet_result result = new makeFishnet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "makeFishnet failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_overlaybuilding(AsyncCallback callback, object state)
      {
        return send_overlaybuilding(callback, state);
      }

      public Result End_overlaybuilding(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_overlaybuilding();
      }

      #endif

      public Result overlaybuilding()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_overlaybuilding(null, null);
        return End_overlaybuilding(asyncResult);

        #else
        send_overlaybuilding();
        return recv_overlaybuilding();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_overlaybuilding(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("overlaybuilding", TMessageType.Call, seqid_));
        overlaybuilding_args args = new overlaybuilding_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_overlaybuilding()
      {
        oprot_.WriteMessageBegin(new TMessage("overlaybuilding", TMessageType.Call, seqid_));
        overlaybuilding_args args = new overlaybuilding_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_overlaybuilding()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        overlaybuilding_result result = new overlaybuilding_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "overlaybuilding failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_overlaygrass(AsyncCallback callback, object state)
      {
        return send_overlaygrass(callback, state);
      }

      public Result End_overlaygrass(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_overlaygrass();
      }

      #endif

      public Result overlaygrass()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_overlaygrass(null, null);
        return End_overlaygrass(asyncResult);

        #else
        send_overlaygrass();
        return recv_overlaygrass();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_overlaygrass(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("overlaygrass", TMessageType.Call, seqid_));
        overlaygrass_args args = new overlaygrass_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_overlaygrass()
      {
        oprot_.WriteMessageBegin(new TMessage("overlaygrass", TMessageType.Call, seqid_));
        overlaygrass_args args = new overlaygrass_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_overlaygrass()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        overlaygrass_result result = new overlaygrass_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "overlaygrass failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_overlaywater(AsyncCallback callback, object state)
      {
        return send_overlaywater(callback, state);
      }

      public Result End_overlaywater(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_overlaywater();
      }

      #endif

      public Result overlaywater()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_overlaywater(null, null);
        return End_overlaywater(asyncResult);

        #else
        send_overlaywater();
        return recv_overlaywater();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_overlaywater(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("overlaywater", TMessageType.Call, seqid_));
        overlaywater_args args = new overlaywater_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_overlaywater()
      {
        oprot_.WriteMessageBegin(new TMessage("overlaywater", TMessageType.Call, seqid_));
        overlaywater_args args = new overlaywater_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_overlaywater()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        overlaywater_result result = new overlaywater_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "overlaywater failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_cluster(AsyncCallback callback, object state)
      {
        return send_cluster(callback, state);
      }

      public Result End_cluster(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_cluster();
      }

      #endif

      public Result cluster()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_cluster(null, null);
        return End_cluster(asyncResult);

        #else
        send_cluster();
        return recv_cluster();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cluster(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("cluster", TMessageType.Call, seqid_));
        cluster_args args = new cluster_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_cluster()
      {
        oprot_.WriteMessageBegin(new TMessage("cluster", TMessageType.Call, seqid_));
        cluster_args args = new cluster_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Result recv_cluster()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cluster_result result = new cluster_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cluster failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["RefreshCell"] = RefreshCell_Process;
        processMap_["refreshGroundCover"] = refreshGroundCover_Process;
        processMap_["refresh3DCover"] = refresh3DCover_Process;
        processMap_["refreshGroundCoverLayer"] = refreshGroundCoverLayer_Process;
        processMap_["refresh3DCoverLayer"] = refresh3DCoverLayer_Process;
        processMap_["refreshDTLayer"] = refreshDTLayer_Process;
        processMap_["refreshDefectLayer"] = refreshDefectLayer_Process;
        processMap_["refreshInfLayer"] = refreshInfLayer_Process;
        processMap_["refreshTINLayer"] = refreshTINLayer_Process;
        processMap_["refreshBuildingLayer"] = refreshBuildingLayer_Process;
        processMap_["refreshBuildingSmoothLayer"] = refreshBuildingSmoothLayer_Process;
        processMap_["makeFishnet"] = makeFishnet_Process;
        processMap_["overlaybuilding"] = overlaybuilding_Process;
        processMap_["overlaygrass"] = overlaygrass_Process;
        processMap_["overlaywater"] = overlaywater_Process;
        processMap_["cluster"] = cluster_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void RefreshCell_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RefreshCell_args args = new RefreshCell_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RefreshCell_result result = new RefreshCell_result();
        try
        {
          result.Success = iface_.RefreshCell();
          oprot.WriteMessageBegin(new TMessage("RefreshCell", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RefreshCell", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refreshGroundCover_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refreshGroundCover_args args = new refreshGroundCover_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refreshGroundCover_result result = new refreshGroundCover_result();
        try
        {
          result.Success = iface_.refreshGroundCover(args.CellName);
          oprot.WriteMessageBegin(new TMessage("refreshGroundCover", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refreshGroundCover", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refresh3DCover_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refresh3DCover_args args = new refresh3DCover_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refresh3DCover_result result = new refresh3DCover_result();
        try
        {
          result.Success = iface_.refresh3DCover(args.CellName);
          oprot.WriteMessageBegin(new TMessage("refresh3DCover", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refresh3DCover", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refreshGroundCoverLayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refreshGroundCoverLayer_args args = new refreshGroundCoverLayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refreshGroundCoverLayer_result result = new refreshGroundCoverLayer_result();
        try
        {
          result.Success = iface_.refreshGroundCoverLayer(args.MinXid, args.MinYid, args.MaxXid, args.MaxYid);
          oprot.WriteMessageBegin(new TMessage("refreshGroundCoverLayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refreshGroundCoverLayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refresh3DCoverLayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refresh3DCoverLayer_args args = new refresh3DCoverLayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refresh3DCoverLayer_result result = new refresh3DCoverLayer_result();
        try
        {
          result.Success = iface_.refresh3DCoverLayer(args.MinXid, args.MinYid, args.MaxXid, args.MaxYid);
          oprot.WriteMessageBegin(new TMessage("refresh3DCoverLayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refresh3DCoverLayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refreshDTLayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refreshDTLayer_args args = new refreshDTLayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refreshDTLayer_result result = new refreshDTLayer_result();
        try
        {
          result.Success = iface_.refreshDTLayer(args.Bts, args.Dis, args.Minx, args.Miny, args.Maxx, args.Maxy);
          oprot.WriteMessageBegin(new TMessage("refreshDTLayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refreshDTLayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refreshDefectLayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refreshDefectLayer_args args = new refreshDefectLayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refreshDefectLayer_result result = new refreshDefectLayer_result();
        try
        {
          result.Success = iface_.refreshDefectLayer(args.MinXid, args.MinYid, args.MaxXid, args.MaxYid, args.Type);
          oprot.WriteMessageBegin(new TMessage("refreshDefectLayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refreshDefectLayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refreshInfLayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refreshInfLayer_args args = new refreshInfLayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refreshInfLayer_result result = new refreshInfLayer_result();
        try
        {
          result.Success = iface_.refreshInfLayer();
          oprot.WriteMessageBegin(new TMessage("refreshInfLayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refreshInfLayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refreshTINLayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refreshTINLayer_args args = new refreshTINLayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refreshTINLayer_result result = new refreshTINLayer_result();
        try
        {
          result.Success = iface_.refreshTINLayer();
          oprot.WriteMessageBegin(new TMessage("refreshTINLayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refreshTINLayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refreshBuildingLayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refreshBuildingLayer_args args = new refreshBuildingLayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refreshBuildingLayer_result result = new refreshBuildingLayer_result();
        try
        {
          result.Success = iface_.refreshBuildingLayer();
          oprot.WriteMessageBegin(new TMessage("refreshBuildingLayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refreshBuildingLayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void refreshBuildingSmoothLayer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        refreshBuildingSmoothLayer_args args = new refreshBuildingSmoothLayer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        refreshBuildingSmoothLayer_result result = new refreshBuildingSmoothLayer_result();
        try
        {
          result.Success = iface_.refreshBuildingSmoothLayer();
          oprot.WriteMessageBegin(new TMessage("refreshBuildingSmoothLayer", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("refreshBuildingSmoothLayer", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void makeFishnet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        makeFishnet_args args = new makeFishnet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        makeFishnet_result result = new makeFishnet_result();
        try
        {
          result.Success = iface_.makeFishnet();
          oprot.WriteMessageBegin(new TMessage("makeFishnet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("makeFishnet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void overlaybuilding_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        overlaybuilding_args args = new overlaybuilding_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        overlaybuilding_result result = new overlaybuilding_result();
        try
        {
          result.Success = iface_.overlaybuilding();
          oprot.WriteMessageBegin(new TMessage("overlaybuilding", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("overlaybuilding", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void overlaygrass_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        overlaygrass_args args = new overlaygrass_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        overlaygrass_result result = new overlaygrass_result();
        try
        {
          result.Success = iface_.overlaygrass();
          oprot.WriteMessageBegin(new TMessage("overlaygrass", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("overlaygrass", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void overlaywater_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        overlaywater_args args = new overlaywater_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        overlaywater_result result = new overlaywater_result();
        try
        {
          result.Success = iface_.overlaywater();
          oprot.WriteMessageBegin(new TMessage("overlaywater", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("overlaywater", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cluster_args args = new cluster_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cluster_result result = new cluster_result();
        try
        {
          result.Success = iface_.cluster();
          oprot.WriteMessageBegin(new TMessage("cluster", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("cluster", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RefreshCell_args : TBase
    {

      public RefreshCell_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RefreshCell_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RefreshCell_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RefreshCell_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RefreshCell_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RefreshCell_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RefreshCell_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshGroundCover_args : TBase
    {
      private string _cellName;

      public string CellName
      {
        get
        {
          return _cellName;
        }
        set
        {
          __isset.cellName = true;
          this._cellName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cellName;
      }

      public refreshGroundCover_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CellName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshGroundCover_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CellName != null && __isset.cellName) {
            field.Name = "cellName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CellName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshGroundCover_args(");
        bool __first = true;
        if (CellName != null && __isset.cellName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CellName: ");
          __sb.Append(CellName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshGroundCover_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refreshGroundCover_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshGroundCover_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshGroundCover_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refresh3DCover_args : TBase
    {
      private string _cellName;

      public string CellName
      {
        get
        {
          return _cellName;
        }
        set
        {
          __isset.cellName = true;
          this._cellName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cellName;
      }

      public refresh3DCover_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  CellName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refresh3DCover_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (CellName != null && __isset.cellName) {
            field.Name = "cellName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CellName);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refresh3DCover_args(");
        bool __first = true;
        if (CellName != null && __isset.cellName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CellName: ");
          __sb.Append(CellName);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refresh3DCover_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refresh3DCover_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refresh3DCover_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refresh3DCover_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshGroundCoverLayer_args : TBase
    {
      private int _minXid;
      private int _minYid;
      private int _maxXid;
      private int _maxYid;

      public int MinXid
      {
        get
        {
          return _minXid;
        }
        set
        {
          __isset.minXid = true;
          this._minXid = value;
        }
      }

      public int MinYid
      {
        get
        {
          return _minYid;
        }
        set
        {
          __isset.minYid = true;
          this._minYid = value;
        }
      }

      public int MaxXid
      {
        get
        {
          return _maxXid;
        }
        set
        {
          __isset.maxXid = true;
          this._maxXid = value;
        }
      }

      public int MaxYid
      {
        get
        {
          return _maxYid;
        }
        set
        {
          __isset.maxYid = true;
          this._maxYid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool minXid;
        public bool minYid;
        public bool maxXid;
        public bool maxYid;
      }

      public refreshGroundCoverLayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  MinXid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MinYid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  MaxXid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  MaxYid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshGroundCoverLayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.minXid) {
            field.Name = "minXid";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinXid);
            oprot.WriteFieldEnd();
          }
          if (__isset.minYid) {
            field.Name = "minYid";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinYid);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxXid) {
            field.Name = "maxXid";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxXid);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxYid) {
            field.Name = "maxYid";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxYid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshGroundCoverLayer_args(");
        bool __first = true;
        if (__isset.minXid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinXid: ");
          __sb.Append(MinXid);
        }
        if (__isset.minYid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinYid: ");
          __sb.Append(MinYid);
        }
        if (__isset.maxXid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxXid: ");
          __sb.Append(MaxXid);
        }
        if (__isset.maxYid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxYid: ");
          __sb.Append(MaxYid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshGroundCoverLayer_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refreshGroundCoverLayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshGroundCoverLayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshGroundCoverLayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refresh3DCoverLayer_args : TBase
    {
      private int _minXid;
      private int _minYid;
      private int _maxXid;
      private int _maxYid;

      public int MinXid
      {
        get
        {
          return _minXid;
        }
        set
        {
          __isset.minXid = true;
          this._minXid = value;
        }
      }

      public int MinYid
      {
        get
        {
          return _minYid;
        }
        set
        {
          __isset.minYid = true;
          this._minYid = value;
        }
      }

      public int MaxXid
      {
        get
        {
          return _maxXid;
        }
        set
        {
          __isset.maxXid = true;
          this._maxXid = value;
        }
      }

      public int MaxYid
      {
        get
        {
          return _maxYid;
        }
        set
        {
          __isset.maxYid = true;
          this._maxYid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool minXid;
        public bool minYid;
        public bool maxXid;
        public bool maxYid;
      }

      public refresh3DCoverLayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  MinXid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MinYid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  MaxXid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  MaxYid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refresh3DCoverLayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.minXid) {
            field.Name = "minXid";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinXid);
            oprot.WriteFieldEnd();
          }
          if (__isset.minYid) {
            field.Name = "minYid";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinYid);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxXid) {
            field.Name = "maxXid";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxXid);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxYid) {
            field.Name = "maxYid";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxYid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refresh3DCoverLayer_args(");
        bool __first = true;
        if (__isset.minXid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinXid: ");
          __sb.Append(MinXid);
        }
        if (__isset.minYid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinYid: ");
          __sb.Append(MinYid);
        }
        if (__isset.maxXid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxXid: ");
          __sb.Append(MaxXid);
        }
        if (__isset.maxYid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxYid: ");
          __sb.Append(MaxYid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refresh3DCoverLayer_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refresh3DCoverLayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refresh3DCoverLayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refresh3DCoverLayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshDTLayer_args : TBase
    {
      private string _bts;
      private int _dis;
      private double _minx;
      private double _miny;
      private double _maxx;
      private double _maxy;

      public string Bts
      {
        get
        {
          return _bts;
        }
        set
        {
          __isset.bts = true;
          this._bts = value;
        }
      }

      public int Dis
      {
        get
        {
          return _dis;
        }
        set
        {
          __isset.dis = true;
          this._dis = value;
        }
      }

      public double Minx
      {
        get
        {
          return _minx;
        }
        set
        {
          __isset.minx = true;
          this._minx = value;
        }
      }

      public double Miny
      {
        get
        {
          return _miny;
        }
        set
        {
          __isset.miny = true;
          this._miny = value;
        }
      }

      public double Maxx
      {
        get
        {
          return _maxx;
        }
        set
        {
          __isset.maxx = true;
          this._maxx = value;
        }
      }

      public double Maxy
      {
        get
        {
          return _maxy;
        }
        set
        {
          __isset.maxy = true;
          this._maxy = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bts;
        public bool dis;
        public bool minx;
        public bool miny;
        public bool maxx;
        public bool maxy;
      }

      public refreshDTLayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Bts = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Dis = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Double) {
                  Minx = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Double) {
                  Miny = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.Double) {
                  Maxx = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.Double) {
                  Maxy = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshDTLayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Bts != null && __isset.bts) {
            field.Name = "bts";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Bts);
            oprot.WriteFieldEnd();
          }
          if (__isset.dis) {
            field.Name = "dis";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Dis);
            oprot.WriteFieldEnd();
          }
          if (__isset.minx) {
            field.Name = "minx";
            field.Type = TType.Double;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Minx);
            oprot.WriteFieldEnd();
          }
          if (__isset.miny) {
            field.Name = "miny";
            field.Type = TType.Double;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Miny);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxx) {
            field.Name = "maxx";
            field.Type = TType.Double;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Maxx);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxy) {
            field.Name = "maxy";
            field.Type = TType.Double;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Maxy);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshDTLayer_args(");
        bool __first = true;
        if (Bts != null && __isset.bts) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Bts: ");
          __sb.Append(Bts);
        }
        if (__isset.dis) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dis: ");
          __sb.Append(Dis);
        }
        if (__isset.minx) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Minx: ");
          __sb.Append(Minx);
        }
        if (__isset.miny) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Miny: ");
          __sb.Append(Miny);
        }
        if (__isset.maxx) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Maxx: ");
          __sb.Append(Maxx);
        }
        if (__isset.maxy) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Maxy: ");
          __sb.Append(Maxy);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshDTLayer_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refreshDTLayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshDTLayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshDTLayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshDefectLayer_args : TBase
    {
      private int _minXid;
      private int _minYid;
      private int _maxXid;
      private int _maxYid;
      private DefectType _type;

      public int MinXid
      {
        get
        {
          return _minXid;
        }
        set
        {
          __isset.minXid = true;
          this._minXid = value;
        }
      }

      public int MinYid
      {
        get
        {
          return _minYid;
        }
        set
        {
          __isset.minYid = true;
          this._minYid = value;
        }
      }

      public int MaxXid
      {
        get
        {
          return _maxXid;
        }
        set
        {
          __isset.maxXid = true;
          this._maxXid = value;
        }
      }

      public int MaxYid
      {
        get
        {
          return _maxYid;
        }
        set
        {
          __isset.maxYid = true;
          this._maxYid = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="DefectType"/>
      /// </summary>
      public DefectType Type
      {
        get
        {
          return _type;
        }
        set
        {
          __isset.type = true;
          this._type = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool minXid;
        public bool minYid;
        public bool maxXid;
        public bool maxYid;
        public bool type;
      }

      public refreshDefectLayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  MinXid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  MinYid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  MaxXid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  MaxYid = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.I32) {
                  Type = (DefectType)iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshDefectLayer_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.minXid) {
            field.Name = "minXid";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinXid);
            oprot.WriteFieldEnd();
          }
          if (__isset.minYid) {
            field.Name = "minYid";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MinYid);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxXid) {
            field.Name = "maxXid";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxXid);
            oprot.WriteFieldEnd();
          }
          if (__isset.maxYid) {
            field.Name = "maxYid";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(MaxYid);
            oprot.WriteFieldEnd();
          }
          if (__isset.type) {
            field.Name = "type";
            field.Type = TType.I32;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32((int)Type);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshDefectLayer_args(");
        bool __first = true;
        if (__isset.minXid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinXid: ");
          __sb.Append(MinXid);
        }
        if (__isset.minYid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MinYid: ");
          __sb.Append(MinYid);
        }
        if (__isset.maxXid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxXid: ");
          __sb.Append(MaxXid);
        }
        if (__isset.maxYid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MaxYid: ");
          __sb.Append(MaxYid);
        }
        if (__isset.type) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Type: ");
          __sb.Append(Type);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshDefectLayer_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refreshDefectLayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshDefectLayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshDefectLayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshInfLayer_args : TBase
    {

      public refreshInfLayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshInfLayer_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshInfLayer_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshInfLayer_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refreshInfLayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshInfLayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshInfLayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshTINLayer_args : TBase
    {

      public refreshTINLayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshTINLayer_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshTINLayer_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshTINLayer_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refreshTINLayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshTINLayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshTINLayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshBuildingLayer_args : TBase
    {

      public refreshBuildingLayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshBuildingLayer_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshBuildingLayer_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshBuildingLayer_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refreshBuildingLayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshBuildingLayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshBuildingLayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshBuildingSmoothLayer_args : TBase
    {

      public refreshBuildingSmoothLayer_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshBuildingSmoothLayer_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshBuildingSmoothLayer_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class refreshBuildingSmoothLayer_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public refreshBuildingSmoothLayer_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("refreshBuildingSmoothLayer_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("refreshBuildingSmoothLayer_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeFishnet_args : TBase
    {

      public makeFishnet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("makeFishnet_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makeFishnet_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeFishnet_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public makeFishnet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("makeFishnet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("makeFishnet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class overlaybuilding_args : TBase
    {

      public overlaybuilding_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("overlaybuilding_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("overlaybuilding_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class overlaybuilding_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public overlaybuilding_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("overlaybuilding_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("overlaybuilding_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class overlaygrass_args : TBase
    {

      public overlaygrass_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("overlaygrass_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("overlaygrass_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class overlaygrass_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public overlaygrass_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("overlaygrass_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("overlaygrass_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class overlaywater_args : TBase
    {

      public overlaywater_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("overlaywater_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("overlaywater_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class overlaywater_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public overlaywater_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("overlaywater_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("overlaywater_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cluster_args : TBase
    {

      public cluster_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cluster_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cluster_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cluster_result : TBase
    {
      private Result _success;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public cluster_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Result();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cluster_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cluster_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
